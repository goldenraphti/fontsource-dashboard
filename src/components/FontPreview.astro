---
import { Font } from 'astro:assets';
import type {FontType} from '../content/fonts-list';
import { toAttributeString } from 'astro/runtime/server/render/util.js';

interface Props {
  fontToPreview: FontType
}

const { fontToPreview } = Astro.props;
---
<Font cssVariable={fontToPreview.cssVariable} preload />
<details font-name={fontToPreview.fontName} font-categories={fontToPreview.fontCategories.join(", ")} font-tags={fontToPreview?.tags?.join(", ") ?? ""} >
  <summary>
    <p style=`--font-family: var(${fontToPreview.cssVariable})`>This is a preview of the font "{fontToPreview.fontName}"</p>
  </summary>
  <ul>
    <li><a href={fontToPreview.urlPreview}>Preview ðŸ”—</a></li>
    <li><strong>Categories:</strong> {fontToPreview.fontCategories.join(", ")}</li>
    {fontToPreview?.tags?.length && (<li><strong>Tags:</strong> {fontToPreview.tags?.join(", ")}</li>)}
  </ul>
</details>

<style>
  details {
    --outer-inline-padding: 2rem;
    --outer-block-padding: 1.5rem;
    width: fit-content;
    border: 1px solid var(--bg-color-accent);
    border-radius: 0.5rem;
    height: auto;

    summary {
      padding: var(--outer-block-padding) var(--outer-inline-padding);
      margin: 0;
      font-size: var(--font-size-preview, 1.5rem);
      font-weight: var(--font-weight-preview, 400);
      font-style: var(--font-italic-preview, normal);
      cursor: pointer;
      list-style: none;

      & p {
        font-family: var(--font-family);
        margin: 0;
        text-align: start;
      }

    }

    &::details-content {
      opacity: 0;
      block-size: 0;
      overflow-y: clip;
      transition: content-visibility 0.2s allow-discrete, opacity 0.2s, block-size 0.2s;
      transition-timing-function: ease-in-out;
      padding-inline: var(--outer-inline-padding);
    }

    & ul {
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
    }

    &[open]::details-content {
      opacity: 1;
      block-size: auto;
      overflow: clip; /* Clip off contents while animating */
      padding-block-end: var(--outer-block-padding);
    }
  }
</style>